This file contains notes to self, just so that I don't forget them later on.

* Replace `print`s with `log`s.

  The idea is that logs will stay in the production code. They can be easily
  switched on and off by the verbosity level setting.

  Reference: `logging` module


* Refactor how the passes are applied to the list of tokens.

  There's got to be a way to simplify the logic instead of dealing with three
  lists and mangling their indices.


* Document the `_expand_body` function.

  Probably should also make it a method


* Refactor `_pattern_match` function

  Probably make it a method of the Rule class


* Implement the **literal string** with spaces for the `listparse` module

  A **literal string** is any sequence of characters, usually enclosed in single
  quotes ('). If there are no whitespace characters in the literal string, the
  quotes can be omitted.

  >>>
  IMPORTANT: this feature is not implemented in the syntax. However, you can
  emulate it by using a `matcher` with the following function:

    "mystr~find": lambda x: x == 'my literal string'
  <<<

* Implement the **regex literal** for the `listparse` module

  A **regex literal** is a string enclosed in single quotes with the letter 'r'
  immediately preceding the opening quote. Inside the quotes, the syntax defined
  in the Python's standard `re` module is used. To match a list element against
  a regex literal, `re.search` function is used. That is, if you want your
  regular expression to match the whole contents of an element, use the '^' and
  '$' anchors inside the regex literal.

  This too can be emulated with a matcher token.
