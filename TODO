This file contains notes to self, just so that I don't forget them later on.

* Replace `print`s with `log`s.

  The idea is that logs will stay in the production code. They can be easily
  switched on and off by the verbosity level setting.

  Reference: `logging` module


* Refactor how the passes are applied to the list of tokens.

  There's got to be a way to simplify the logic instead of dealing with three
  lists and mangling their indices.


* Document the `_expand_body` function.

  Probably should also make it a method


* Review the `_Rule` class

  I think it needs a slightly more advanced processing in the constructor, not
  just setting the `special` flag.


* Refactor `_pattern_match` function

  This one is closely tied to the previous note.

  One way to rule this out would be to make `_Rule` a base class. Two new
  classes--`_RegularRule` and `_CyclingRule_`--will subclass from `_Rule`. Each
  of those subclasses will then have its own `pattern_match` method.


* Implement the 'a--xxx = {a} {1000} {x}' syntax in the RULES.

  To me at least, this looks like a cleaner way than writing 3 slightly varying
  rules.

  The rules for Spanish would become:

      RULES = """
      ab = {a0} y {b}
      axx = {a00} {x}
      a--xxx = {a} {1000} {x}
      (a)xxxxxx = {a} {x}
     """


* Document and refactor `listre`.

  It certainly needs a bit more explanation on how it handles the syntax for
  passes.
